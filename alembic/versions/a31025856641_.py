"""empty message

Revision ID: a31025856641
Revises: dfefb8ab3912
Create Date: 2024-07-01 12:47:19.041351

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "a31025856641"
down_revision: Union[str, None] = "dfefb8ab3912"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_experiment")
    op.alter_column("experiment", "id", new_column_name="uuid")
    op.alter_column("experiment", "alias", new_column_name="eid")
    op.alter_column(
        "experiment",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "experiment",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("user", "id", new_column_name="uuid")
    op.alter_column("experiment_tag", "experiment_id", new_column_name="experiment_uuid")
    op.drop_constraint("experiment_alias_key", "experiment", type_="unique")
    op.create_unique_constraint(None, "experiment", ["eid"])
    op.drop_constraint("experiment_created_by_fkey", "experiment", type_="foreignkey")
    op.create_foreign_key(None, "experiment", "user", ["created_by"], ["uuid"])
    op.drop_constraint("experiment_tag_experiment_id_fkey", "experiment_tag", type_="foreignkey")
    op.create_foreign_key(None, "experiment_tag", "experiment", ["experiment_uuid"], ["uuid"])
    # op.drop_constraint("tag_key_key", "tag", type_="unique")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("user", sa.Column("id", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_column("user", "uuid")
    op.create_unique_constraint("tag_key_key", "tag", ["key"])
    op.add_column(
        "experiment_tag", sa.Column("experiment_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(None, "experiment_tag", type_="foreignkey")
    op.create_foreign_key(
        "experiment_tag_experiment_id_fkey",
        "experiment_tag",
        "experiment",
        ["experiment_id"],
        ["id"],
    )
    op.drop_column("experiment_tag", "experiment_uuid")
    op.add_column("experiment", sa.Column("id", sa.UUID(), autoincrement=False, nullable=False))
    op.add_column(
        "experiment", sa.Column("alias", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(None, "experiment", type_="foreignkey")
    op.create_foreign_key(
        "experiment_created_by_fkey", "experiment", "user", ["created_by"], ["id"]
    )
    op.drop_constraint(None, "experiment", type_="unique")
    op.create_unique_constraint("experiment_alias_key", "experiment", ["alias"])
    op.alter_column(
        "experiment",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "experiment",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_column("experiment", "eid")
    op.drop_column("experiment", "uuid")
    op.create_table(
        "user_experiment",
        sa.Column("experiment_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"], ["experiment.id"], name="user_experiment_experiment_id_fkey"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="user_experiment_user_id_fkey"),
    )
    # ### end Alembic commands ###
